name: 'ECR push and ECS deploy'
description: 'Build and push new image to AWS ECR and force new deployment of ECS service'
branding:
  icon: 'upload-cloud'
  color: 'orange'
inputs:
  ecr-registry:
    description: 'ECR registry URI'
    required: true
  ecr-repository:
    description: 'ECR repository name'
    required: true
  image-tag:
    description: 'ECR image tag. Defaults to latest'
    required: true
    default: 'latest'
  ecs-cluster:
    description: 'The name of the ECS cluster'
    required: true
  ecs-service:
    description: 'ECS service name'
    required: true
runs:
  using: "composite"
  steps: 
    - name: Build
      id: build
      shell: bash
      run: docker build -t ${{ inputs.ecr-registry }}/${{ inputs.ecr-repository }} .

    - name: Tag with SHA
      id: tag-with-input
      shell: bash
      run: docker tag ${{ inputs.ecr-registry }}/${{ inputs.ecr-repository }} ${{ inputs.ecr-registry }}/${{ inputs.ecr-repository }}:${{ inputs.image-tag }}

    - name: Tag with latest
      id: tag-latest
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      shell: bash
      run: docker tag ${{ inputs.ecr-registry }}/${{ inputs.ecr-repository }} ${{ inputs.ecr-registry }}/${{ inputs.ecr-repository }}:latest

    - name: Push to AWS ECR
      id: push-to-ecr
      shell: bash
      run: |
        docker push ${{ inputs.ecr-registry }}/${{ inputs.ecr-repository }} --all-tags
        echo "::set-output name=image::${{ inputs.ecr-registry }}/${{ inputs.ecr-repository }}:${{ inputs.image-tag }}"

    - name : Force new AWS ECS deployment
      id: ecs-deploy
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      shell: bash
      run: |
        aws ecs update-service --cluster ${{ inputs.ecs-cluster }} --service ${{ inputs.ecs-service }} --force-new-deployment
